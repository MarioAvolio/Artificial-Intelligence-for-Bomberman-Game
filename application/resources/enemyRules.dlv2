#show path/2.
#show bomb/2.
#show enemyBomb/2.
#show breakBomb/2.
#show adjacentPlayerAndEnemy/2.

% GRASS = 0
% PLAYER = 1
% ENEMY = 2
% BLOCK = 3
% BOX = 4
% BOMB = 5

% %%%%%%%%%%%%%%%%% UTILITY %%%%%%%%%%%%%%%%%
player(X, Y) :- point(X, Y, 1).
enemy(X, Y) :- point(X, Y, 2).

adjacentPlayer(X, Y1):- player(X, Y), Y1 = Y + 1.
adjacentPlayer(X1, Y):- player(X, Y), X1 = X + 1.
adjacentPlayer(X1, Y):- player(X, Y), X1 = X - 1.
adjacentPlayer(X, Y1):- player(X, Y), Y1 = Y - 1.
adjacentPlayer(X1, Y1):- player(X, Y), X1 = X + 1, Y1 = Y + 1.
adjacentPlayer(X1, Y1):- player(X, Y), X1 = X + 1, Y1 = Y - 1.
adjacentPlayer(X1, Y1):- player(X, Y), X1 = X - 1, Y1 = Y + 1.
adjacentPlayer(X1, Y1):- player(X, Y), X1 = X - 1, Y1 = Y - 1.


adjacentToPath(X, Y1):- path(X, Y), Y1 = Y + 1.
adjacentToPath(X1, Y):- path(X, Y), X1 = X + 1.
adjacentToPath(X1, Y):- path(X, Y), X1 = X - 1.
adjacentToPath(X, Y1):- path(X, Y), Y1 = Y - 1.

freeToPath(C) :- #count{X,Y : adjacentToPath(X,Y), point(X, Y, 0) } = C.

adjacentPlayerAndEnemy(X, Y) :- enemy(X, Y), adjacentPlayer(X, Y).

adjacentEnemy(X,Y) :- distance(X,Y,Z).
adjacentEnemy(X1, Y1):- enemy(X, Y), X1 = X + 1, Y1 = Y + 1.
adjacentEnemy(X1, Y1):- enemy(X, Y), X1 = X + 1, Y1 = Y - 1.
adjacentEnemy(X1, Y1):- enemy(X, Y), X1 = X - 1, Y1 = Y + 1.
adjacentEnemy(X1, Y1):- enemy(X, Y), X1 = X - 1, Y1 = Y - 1.

%%%%%%%%%%%%%%%%% MOVING %%%%%%%%%%%%%%%%%
path(X,Y) | noPath(X,Y) :- distance(X,Y,D).
:- path(X,Y), point(X,Y,T), T!=0.
:- #count{X,Y : path( X,Y)} > 1.
:- path(X, Y), enemyBomb(X,Y).
:- path(X, Y), breakBomb(X, Y). %PATH != ANY TYPE OF BOMB


%%%%%%%%%%%%%%%%% DODGE BOMB %%%%%%%%%%%%%%%%%
bomb(X, Y) :- distance(X, Y, _), point(X, Y, 5).

% view on diagonals
bomb(X1, Y1) :- enemy(X, Y), point(X1, Y1, 5), X1 = X + 1, Y1 = Y + 1.
bomb(X1, Y1) :- enemy(X, Y), point(X1, Y1, 5), X1 = X + 1, Y1 = Y - 1.
bomb(X1, Y1) :- enemy(X, Y), point(X1, Y1, 5), X1 = X - 1, Y1 = Y + 1.
bomb(X1, Y1) :- enemy(X, Y), point(X1, Y1, 5), X1 = X - 1, Y1 = Y - 1.

adjacentBomb(X, Y1):- bomb(X, Y), Y1 = Y + 1.
adjacentBomb(X1, Y):- bomb(X, Y), X1 = X + 1.
adjacentBomb(X1, Y):- bomb(X, Y), X1 = X - 1.
adjacentBomb(X, Y1):- bomb(X, Y), Y1 = Y - 1.



%%%%%%%%%%%%%%%% PLANT BOMB %%%%%%%%%%%%%%%%%
enemyBomb(X,Y) | noEnemyBomb(X,Y):- distance(X,Y,D).
:- enemyBomb(X,Y), distance(X,Y,D), D > 1.
:- #count{X,Y : enemyBomb(X,Y)} > 1.
:- enemyBomb(X,Y), point(X, Y, Z), Z!=0.

free(C) :- #count{X,Y : adjacentEnemy(X,Y), point(X, Y, 0)} = C.
:- free(C), C<=1, enemyBomb(X,Y).
:- free(C), C<=1, breakBomb(X,Y).


%%%%%%%%%%%%%%%%% BREAK WOODEN BLOCKS %%%%%%%%%%%%%%%%%
%IF LAST POSITION OF ENEMY IS ONLY PATH AVAILABLE, HE GO BACK AND PLACE A BOMB IN CURRENT POSITION
breakBomb(A,B):- lastPositionEnemy(X,Y,_), path(X,Y), enemy(A,B), adjacentEnemy(C,D), point(C, D, 4), free(K), K>1, freeToPath(M), M > 1.

idealPath(X, Y) :- #min{D, X1, Y1 : distance(X1, Y1, D)} = K, distance(X, Y, K).
breakBomb(A,B) :- idealPath(X, Y), point(X, Y, 4), enemy(A,B), free(C), C>1, freeToPath(M), M > 1.

breakBomb(X,Y) :- adjacentPlayer(A,B), adjacentEnemy(A,B), point(A, B, 4), enemy(X, Y), free(C), C>1, freeToPath(M), M > 1.
:- #count{X,Y : breakBomb(X,Y)} > 1.

%%%%%%%%%%%%%%%%% WEAK CONSTRAINT %%%%%%%%%%%%%%%%%

% % minimize distance between player and enemy
:~ path(X,Y), distance(X,Y,D). [D@1,X,Y,D]

% % dont go in last positions
:~ path(X,Y), lastPositionEnemy(X,Y,Z). [Z@1, X, Y]

% % maximize enemy bomb
:~ noEnemyBomb(X,Y), adjacentPlayer(X, Y). [1@2,X,Y]

% % maximize movement, otherwise the player would always be seated
:~ noPath(X,Y). [1@3,X,Y]

% % minimizes path that the enemy can go in front of bomb!
:~ path(X,Y), adjacentBomb(X, Y). [2@3, X, Y]



